name: Build and Release Extension

on:
  push:
    branches: [main]
    paths:
      - "extension/**"
      - "Makefile"
      - "version.json"
      - ".github/workflows/build.yml"
  workflow_dispatch:
    inputs:
      pg_major:
        description: "PostgreSQL major version"
        required: true
        default: "17"
      variant:
        description: "Image variant"
        required: true
        default: "alpine"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_major: [16, 17]
        variant: [alpine]
        platform: [linux/amd64, linux/arm64]
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for NBGV

      - name: Setup Nerdbank.GitVersioning
        uses: dotnet/nbgv@v0.4.2
        id: nbgv
        with:
          setAllVars: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version and arch
        id: version
        run: |
          echo "version=${{ steps.nbgv.outputs.CloudBuildNumber }}" >> $GITHUB_OUTPUT
          ARCH=$(echo ${{ matrix.platform }} | cut -d/ -f2)
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      - name: Build extension
        run: |
          make compile \
            PG_MAJOR=${{ matrix.pg_major }} \
            VARIANT=${{ matrix.variant }} \
            PLATFORMS=${{ matrix.platform }} \
            VERSION=${{ steps.version.outputs.version }}

      - name: Package artifacts
        run: |
          make package \
            PG_MAJOR=${{ matrix.pg_major }} \
            VARIANT=${{ matrix.variant }} \
            PLATFORMS=${{ matrix.platform }} \
            VERSION=${{ steps.version.outputs.version }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: base58id-${{ steps.version.outputs.version }}-pg${{ matrix.pg_major }}-${{ matrix.variant }}-${{ steps.version.outputs.arch }}
          path: releases/*.tar.gz
          retention-days: 90

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # push tags & create releases
      actions: read # download artifacts
    steps:
      - name: Checkout (full history for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Resolve version
        id: resolve
        shell: bash
        run: |
          VER="${{ needs.build.outputs.version }}"
          # Strip any +build metadata for the git tag (keep full VER elsewhere)
          CLEAN="${VER%%+*}"
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          echo "clean_version=$CLEAN" >> "$GITHUB_OUTPUT"
          echo "tag=v$CLEAN" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        shell: bash
        run: |
          TAG="${{ steps.resolve.outputs.tag }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Tag $TAG already exists; skipping."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      # Pull back all matrix-produced artifacts for this version.
      # Your artifact names look like:
      #   base58id-<version>-pg<pg_major>-<variant>-<arch>
      - name: Download release artifacts (all matrices)
        uses: actions/download-artifact@v4
        with:
          pattern: base58id-${{ needs.build.outputs.version }}-*
          merge-multiple: true
          path: release-assets

      # Option A: Use gh CLI (simple; handles updates/clobber cleanly)
      - name: Ensure gh CLI is available
        shell: bash
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not found; installing via apt..."
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          gh --version

      - name: Create/Update GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          TAG="${{ steps.resolve.outputs.tag }}"
          VER="${{ steps.resolve.outputs.version }}"        # full version (may include '+')
          CLEAN="${{ steps.resolve.outputs.clean_version }}" # stripped of build metadata

          PRERELEASE_FLAG=""
          # Mark prerelease if the cleaned version has a hyphen (e.g., 1.2.3-alpha.4)
          if [[ "$CLEAN" == *"-"* ]]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists; will update assets."
          else
            gh release create "$TAG" $PRERELEASE_FLAG \
              --title "v$CLEAN" \
              --generate-notes
          fi

          # Upload everything downloaded into release-assets/
          gh release upload "$TAG" release-assets/** --clobber

  release-latest:
    needs: [build, release]
    runs-on: ubuntu-latest
    permissions:
      contents: write # push tags & create releases
      actions: read # download artifacts
    steps:
      - name: Checkout (full history for tagging)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # Pull back all matrix-produced artifacts for this version.
      - name: Download release artifacts (all matrices)
        uses: actions/download-artifact@v4
        with:
          pattern: base58id-${{ needs.build.outputs.version }}-*
          merge-multiple: true
          path: release-assets

      - name: Rename artifacts to use 'latest' instead of version
        shell: bash
        run: |
          cd release-assets
          for file in *.tar.gz; do
            if [[ -f "$file" ]]; then
              # Replace version number with 'latest' in filename
              newname=$(echo "$file" | sed "s/${{ needs.build.outputs.version }}/latest/g")
              echo "Renaming $file -> $newname"
              mv "$file" "$newname"
            fi
          done

      - name: Create and force-push latest tag
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f -a "latest" -m "Latest release"
          git push -f origin "latest"

      - name: Ensure gh CLI is available
        shell: bash
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not found; installing via apt..."
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi
          gh --version

      - name: Create/Update GitHub Release for latest
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          TAG="latest"

          # Delete existing release if it exists (to ensure clean state)
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists; deleting to recreate."
            gh release delete "$TAG" --yes
          fi

          # Create fresh release
          gh release create "$TAG" \
            --title "Latest Build" \
            --notes "Latest stable build from main branch. This release is continuously updated with the most recent version." \
            --latest

          # Upload everything downloaded into release-assets/
          gh release upload "$TAG" release-assets/** --clobber
